@page "/text/figlet/tofiglet"

<PageTitle>Textify - Figlet - To Figlet - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Textify.Data.Figlet
@inject NavigationManager NavManager

<Hero Title="Textify - Figlet - To Figlet">
	You can demonstrate a feature from Textify where we showcase the text casing feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"Render text using Figlet" feature.
</Hero>
<BrandedBorder>
	<p>Enter some text: <InputText @bind-Value="Input"></InputText></p>
	<p>Max figlet width: <InputNumber @bind-Value="Width"></InputNumber></p>
	<p>Use figlet font: <InputSelect @bind-Value="FigletFontName">
			@foreach (string fontName in FigletFontNames)
			{
				<option value="@fontName">@fontName</option>
			}
		</InputSelect></p>
	<p>Result from <code>RenderFiglet()</code></p>
	@if (Result is not null)
	{
		<pre>@Result</pre>
	}
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Render</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
	</div>
</BrandedBorder>

@code {
	public string[] FigletFontNames = FigletTools.GetFigletFonts().Keys.ToArray();
	public string Input { get; set; } = "Terminaux is powerful!";
	public int Width { get; set; } = 0;
	public string FigletFontName { get; set; } = "small";
	public string Result { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Textify/api/Textify.Data.Figlet.FigletTools.html#Textify_Data_Figlet_FigletTools_RenderFiglet_System_String_System_String_System_Int32_System_Object___"))),
	];

	public void ProcessInput()
	{
		Result = FigletTools.RenderFiglet(Input ?? "", FigletFontName, Width);
	}
}
