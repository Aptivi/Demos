@page "/text/emoji/infomanual"

<PageTitle>Textify - Emoji - Get Info (manual) - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Textify.Accessibility
@using Textify.Data.Unicode
@inject NavigationManager NavManager

<Hero Title="Textify - Emoji - Get Info (manual)">
	You can demonstrate a feature from Textify where we showcase the text casing feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"Get Info about an Emoji" feature.
</Hero>
<BrandedBorder>
	<p>Enter emoji (press <code>WINDOWS + .</code> key): <InputText @bind-Value="Input"></InputText></p>
	<p>Result from <code>GetEmojiFromEmoji()</code>: @Name</p>
	<p>Sequence: @Sequence</p>
	<p>Status: @Status</p>
	<p>Enumeration: @Enumeration</p>
    @if (Errored)
    {
        <p>Error obtaining results: @ErrorReason</p>
    }
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Get info</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
	</div>
</BrandedBorder>

@code {
    public string Input { get; set; } = "😊";
    public bool Errored { get; set; } = false;
    public string ErrorReason { get; set; } = "";
	public string Name { get; set; }
	public string Sequence { get; set; }
	public EmojiStatus Status { get; set; }
	public EmojiEnum Enumeration { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Textify/api/Textify.Data.Unicode.EmojiManager.html#Textify_Data_Unicode_EmojiManager_GetEmojiFromEmoji_System_String_"))),
	];

	public void ProcessInput()
    {
        try
        {
            Errored = false;
            var emojiInfo = EmojiManager.GetEmojiFromEmoji(Input);
            Name = emojiInfo.Name;
            Sequence = emojiInfo.Sequence;
            Status = emojiInfo.Status;
            Enumeration = emojiInfo.Enum;
        }
        catch (Exception ex)
        {
            Errored = true;
            ErrorReason = ex.Message;
        }
	}
}
