@page "/text/manipulation/escape"

<PageTitle>Textify - Manipulation - Escape/Unescape - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Textify.General
@inject NavigationManager NavManager

<Hero Title="Textify - Manipulation - Escape/Unescape">
	You can demonstrate a feature from Textify where we showcase the text casing feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"Escape/Unescape" feature.
</Hero>
<BrandedBorder>
	<p>Enter some text: <InputText @bind-Value="Input"></InputText></p>
	<p>Result from <code>Escape()</code>: @ResultEscaped</p>
	<p>Result from <code>Unescape()</code> from above: @ResultUnescaped</p>
	<p>Result from <code>Unescape()</code> from original: @ResultUnescaped2</p>
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Shift</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[2]">API Reference</button>
	</div>
</BrandedBorder>

@code {
	public string Input { get; set; } = "This string needs to be escaped, because we have \"double quotes\", and a bunch of characters! What? No! The *asterisk* needs it, and so are the (brackets) and the \\(escaped ones\\).";
	public string ResultEscaped { get; set; }
	public string ResultUnescaped { get; set; }
	public string ResultUnescaped2 { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Textify/api/Textify.General.TextTools.html#Textify_General_TextTools_Escape_System_String_"))),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Textify/api/Textify.General.TextTools.html#Textify_General_TextTools_Unescape_System_String_"))),
	];

	public void ProcessInput()
	{
		ResultEscaped = $"{(Input ?? "").Escape()}";
		ResultUnescaped = $"{(ResultEscaped ?? "").Unescape()}";
		ResultUnescaped2 = $"{(Input ?? "").Unescape()}";
	}
}
