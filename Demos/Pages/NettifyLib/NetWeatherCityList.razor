@page "/net/weather/list"

<PageTitle>Textify - Weather - List Cities - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Nettify.MailAddress
@using Nettify.MailAddress.IspInfo
@using Nettify.Rss.Searcher
@using Nettify.Weather
@using Textify.Accessibility
@using Textify.Data.Unicode
@inject NavigationManager NavManager

<Hero Title="Textify - Weather - List Cities">
	You can demonstrate a feature from Nettify where we showcase this feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"List Cities" feature.
</Hero>
<BrandedBorder>
	<p>Enter city name: <InputText @bind-Value="City"></InputText></p>
	<p>Enter API key: <InputText @bind-Value="APIKey"></InputText></p>
	<p>Result from <code>ListAllCitiesAsync()</code></p>
	@if (Results is not null)
	{
		<ul>
			@foreach (var result in Results)
			{
				<p>City name: @result.Key</p>
				<p>Latitude: @result.Value.Item1</p>
				<p>Longitude: @result.Value.Item2</p>
			}
		</ul>
    }
    else if (Errored)
    {
        <p>Error obtaining results: @ErrorReason</p>
    }
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Search</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
	</div>
</BrandedBorder>

@code {
	public string City { get; set; } = "";
    public string APIKey { get; set; } = "";
    public bool Errored { get; set; } = false;
    public string ErrorReason { get; set; } = "";
	public Dictionary<string, (double, double)> Results { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Nettify/api/Nettify.Weather.WeatherForecast.html#Nettify_Weather_WeatherForecast_ListAllCitiesAsync_System_String_System_String_"))),
	];

	public async Task ProcessInput()
    {
        try
        {
            Errored = false;
            Results = await WeatherForecast.ListAllCitiesAsync(City, APIKey);
        }
        catch (Exception ex)
        {
            Errored = true;
            ErrorReason = ex.Message;
        }
	}
}
