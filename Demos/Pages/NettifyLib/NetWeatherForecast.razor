@page "/net/weather/forecast"

<PageTitle>Textify - Weather - Forecast Info - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Nettify.MailAddress
@using Nettify.MailAddress.IspInfo
@using Nettify.Rss.Searcher
@using Nettify.Weather
@using Textify.Accessibility
@using Textify.Data.Unicode
@inject NavigationManager NavManager

<Hero Title="Textify - Weather - Forecast Info">
	You can demonstrate a feature from Nettify where we showcase this feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"Weather forecast info" feature.
</Hero>
<BrandedBorder>
	<p>Enter latitude and longitude: <InputNumber @bind-Value="Latitude"></InputNumber> <InputNumber @bind-Value="Longitude"></InputNumber></p>
	<p>
		Select measurement: <InputSelect @bind-Value="Measurement">
			@foreach (var measurement in Measurements)
			{
				<option value="@measurement">@measurement</option>
			}
		</InputSelect>
	</p>
	<p>Enter API key: <InputText @bind-Value="APIKey"></InputText></p>
	<p>Result from <code>GetWeatherInfoAsync()</code></p>
	@if (Result is not null)
	{
		<ul>
			<p>Weather: @Result.Weather</p>
			<p>Temperature: @Result.Temperature @Result.TemperatureMeasurement</p>
			<p>Wind direction: @Result.WindDirection at @Result.WindSpeed</p>
			<p>Humidity: @Result.Humidity</p>
			<p>Server type: @Result.ServerType</p>
			<p>Weather token: @Result.WeatherToken.ToString()</p>
		</ul>
    }
    else if (Errored)
    {
        <p>Error obtaining results: @ErrorReason</p>
    }
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Search</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
	</div>
</BrandedBorder>

@code {
	public UnitMeasurement[] Measurements = Enum.GetValues<UnitMeasurement>();
	public double Latitude { get; set; } = 0.0;
	public double Longitude { get; set; } = 0.0;
	public string APIKey { get; set; } = "";
    public UnitMeasurement Measurement { get; set; } = UnitMeasurement.Metric;
    public bool Errored { get; set; } = false;
    public string ErrorReason { get; set; } = "";
	public WeatherForecastInfo Result { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Nettify/api/Nettify.Weather.WeatherForecast.html#Nettify_Weather_WeatherForecast_GetWeatherInfoAsync_System_Double_System_Double_System_String_Nettify_Weather_UnitMeasurement_"))),
	];

	public async Task ProcessInput()
    {
        try
        {
            Errored = false;
            Result = await WeatherForecast.GetWeatherInfoAsync(Latitude, Longitude, APIKey, Measurement);
        }
        catch (Exception ex)
        {
            Errored = true;
            ErrorReason = ex.Message;
        }
	}
}
