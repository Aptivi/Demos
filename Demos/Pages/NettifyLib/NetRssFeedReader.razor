@page "/net/rss/feed"

<PageTitle>Textify - RSS - RSS feed reader - Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@using Nettify.MailAddress
@using Nettify.MailAddress.IspInfo
@using Nettify.Rss.Instance
@using Textify.Accessibility
@using Textify.Data.Unicode
@inject NavigationManager NavManager

<Hero Title="Textify - RSS - RSS feed reader">
	You can demonstrate a feature from Nettify where we showcase this feature,
	and we provide the API documentation here for future reference. This demonstrates the
	"Read your RSS feed" feature.
</Hero>
<BrandedBorder>
	<p>Enter host address (MUST be https://): <InputText @bind-Value="Input"></InputText></p>
	<p>Result from the class constructor</p>
	@if (Result is not null)
	{
		<p>Title: <a href="@Result.FeedUrl">@Result.FeedTitle</a></p>
		<p>Description: @Result.FeedDescription</p>
		<p>Feed type: @Result.FeedType</p>
		@if (Result.FeedArticles is not null)
		{
			<p>Article count: @Result.FeedArticles.Length</p>
			<ul>
				@foreach (var article in Result.FeedArticles)
				{
					<p>Title: <a href="@article.ArticleLink">@article.ArticleTitle</a></p>
					<p>Description: @article.ArticleDescription</p>
				}
			</ul>
		}
	}
	<div class="d-grid gap-2 d-sm-flex">
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[0]">Get info</button>
		<button class="btn btn-primary btn-lg" type="button" @onclick="@ClickEvents[1]">API Reference</button>
	</div>
</BrandedBorder>

@code {
	public string Input { get; set; } = "https://rss.nytimes.com/services/xml/rss/nyt/HomePage.xml";
	public RSSFeed Result { get; set; }
	public EventCallback[] ClickEvents => [
		EventCallback.Factory.Create(this, ProcessInput),
		EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("https://aptivi.github.io/Nettify/api/Nettify.Rss.Instance.RSSFeed.html"))),
	];

	public async Task ProcessInput()
	{
		Result = new RSSFeed(Input, RSSFeedType.Infer);
		await Result.RefreshAsync();
	}
}
