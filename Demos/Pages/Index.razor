@page "/"

<PageTitle>Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@inject NavigationManager NavManager

<Hero Title="Demos">
	Here lists all our demonstration projects that we can showcase in this webpage. This covers
	all the demonstrations that we can show here across different libraries, categorized by
	library, then by purpose.
</Hero>
<BrandedBorder>
	<h1>Textify</h1>
	<p>
		This section showcases the useful demonstrations for the Textify library. Not all functions
		are exposed here, but the most common and useful functions are found here.
	</p>
	<Features FeatureArray="@TextDemonstrations" Invert="true" />
</BrandedBorder>

@code
{
	FeatureDescriptor[] TextDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Upper First",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/upperfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can make the first letter of a string uppercase."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Lower First",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/lowerfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can make the first letter of a string lowercase."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Title Case",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/titlecase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can convert the string casing to be suitable for titles."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Addition",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/addprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can add a prefix to the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Addition",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/addsuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can add a suffix to the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Removal",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/removeprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can remove a prefix from the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Removal",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/removesuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can remove a suffix from the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Verification",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/verifyprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can verify a prefix in the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Verification",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/verifysuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can verify a suffix in the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithcase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while caring about casing at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithcase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while caring about casing at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Equals (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/equalscase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for equality while caring about casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Equals (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/equalsnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for equality while ignoring casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Encoding - Encode to BASE64",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/encoding/tobase64"))), "Showcase")
			],
			Description =
				"Showcases how Textify can encode your text to BASE64."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Encoding - Decode from BASE64",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/encoding/frombase64"))), "Showcase")
			],
			Description =
				"Showcases how Textify can decode your text from BASE64."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Misc - Character Width",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/misc/charwidth"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get the width of a character or a set of characters and their types."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Misc - Wrap Sentences",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/misc/wrapsentences"))), "Showcase")
			],
			Description =
				"Showcases how Textify can wrap a long string to a set of sentence lines."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Is Palindrome?",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/palindrome"))), "Showcase")
			],
			Description =
				"Showcases how Textify can detect whether a word is a palindrome (madam) or not (alarm)."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Is Numeric?",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/numeric"))), "Showcase")
			],
			Description =
				"Showcases how Textify can detect whether a string is a number (12345) or not (hello)."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace All",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceall"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace all occurrences of characters or strings with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace All Range",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceallrange"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace all occurrences of characters or strings with a char array or a string array."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Character",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replacechar"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace a character found in an index with another character."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Last Occurrence",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replacelastoccurrence"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace last occurrence of character or string with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Occurrence",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceoccurrence"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace a specific occurrence of character or string with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Reverse",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/reverse"))), "Showcase")
			],
			Description =
				"Showcases how Textify can reverse the order of characters within a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Shift Letters",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/shiftletters"))), "Showcase")
			],
			Description =
				"Showcases how Textify can shift the letters in a string with a shift threshold."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Split With Double Quotes",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/splitdquotes"))), "Showcase")
			],
			Description =
				"Showcases how Textify can split a string delimited with spaces, while handling double quotes."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Truncate String",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/truncate"))), "Showcase")
			],
			Description =
				"Showcases how Textify can truncate a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Escape/Unescape",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/escape"))), "Showcase")
			],
			Description =
				"Showcases how Textify can escape and unescape a set of characters in a string."
		},
	];
}
