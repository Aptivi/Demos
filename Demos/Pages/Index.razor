@page "/"

<PageTitle>Aptivi Project Demos</PageTitle>

@using System.Threading;
@using System.Net;
@using System.Text;
@using System.IO
@using System.Text.Json
@using Demos.Data
@inject NavigationManager NavManager

<Hero Title="Demos">
	Here lists all our demonstration projects that we can showcase in this webpage. This covers
	all the demonstrations that we can show here across different libraries, categorized by
	library, then by purpose.
</Hero>
<BrandedBorder>
	<h1>Textify</h1>
	<p>
		This section showcases the useful demonstrations for the Textify library. Not all functions
		are exposed here, but the most common and useful functions are found here.
	</p>
	<BrandedBorder>
		<h1>Text tools</h1>
		<p>
			The text tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Conversion tools</h1>
		<p>
			The conversion tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextConversionDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Figlet tools</h1>
		<p>
			The Figlet tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextFigletDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Names tools</h1>
		<p>
			The names tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextNamesDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Emoji tools</h1>
		<p>
			The emoji tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextEmojiDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Unicode tools</h1>
		<p>
			The unicode tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextUnicodeDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Word tools</h1>
		<p>
			The word tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextWordDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Space tools</h1>
		<p>
			The space tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextSpacesDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>JSON tools</h1>
		<p>
			The JSON tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextJsonDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Regex tools</h1>
		<p>
			The regex tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextRegexDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Version tools</h1>
		<p>
			The version tools from the Textify library can be found here.
		</p>
		<Features FeatureArray="@TextVersionDemonstrations" Invert="true" />
	</BrandedBorder>
</BrandedBorder>
<BrandedBorder>
	<h1>Nettify</h1>
	<p>
		This section showcases the useful demonstrations for the Nettify library. Not all functions
		are exposed here, but the most common and useful functions are found here.
	</p>
	<BrandedBorder>
		<h1>Dictionary tools</h1>
		<p>
			The dictionary tools from the Nettify library can be found here.
		</p>
		<Features FeatureArray="@NetDictionaryDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>ISP tools</h1>
		<p>
			The ISP tools from the Nettify library can be found here.
		</p>
		<Features FeatureArray="@NetIspDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>RSS tools</h1>
		<p>
			The RSS tools from the Nettify library can be found here.
		</p>
		<Features FeatureArray="@NetRssDemonstrations" Invert="true" />
	</BrandedBorder>
	<BrandedBorder>
		<h1>Weather tools</h1>
		<p>
			The weather tools (only the IBM Weather.com API) from the Nettify library can be found here.
		</p>
		<Features FeatureArray="@NetWeatherDemonstrations" Invert="true" />
	</BrandedBorder>
</BrandedBorder>

@code
{
	#region Textify Demos
	FeatureDescriptor[] TextDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Upper First",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/upperfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can make the first letter of a string uppercase."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Lower First",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/lowerfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can make the first letter of a string lowercase."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Text Casing - Title Case",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/casing/titlecase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can convert the string casing to be suitable for titles."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Addition",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/addprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can add a prefix to the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Addition",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/addsuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can add a suffix to the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Removal",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/removeprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can remove a prefix from the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Removal",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/removesuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can remove a suffix from the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Prefix Verification",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/verifyprefix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can verify a prefix in the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Prefixes and Suffixes - Suffix Verification",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/prefixes/verifysuffix"))), "Showcase")
			],
			Description =
				"Showcases how Textify can verify a suffix in the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Contains (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/containsnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithcase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while caring about casing at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Ends With (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/endswithnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing at the end of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With All (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithallchars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of characters at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With All (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithallstrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for all instances of strings at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With Any (Chars)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithanychars"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of characters at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With Any (Strings)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithanystrings"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of strings at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithcase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while caring about casing at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Starts With (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/startswithnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for any instance of a string while ignoring casing at the beginning of the string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Equals (Case-sensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/equalscase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for equality while caring about casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Equals (Case-insensitive)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/equalsnocase"))), "Showcase")
			],
			Description =
				"Showcases how Textify can check the string for equality while ignoring casing."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Encoding - Encode to BASE64",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/encoding/tobase64"))), "Showcase")
			],
			Description =
				"Showcases how Textify can encode your text to BASE64."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Encoding - Decode from BASE64",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/encoding/frombase64"))), "Showcase")
			],
			Description =
				"Showcases how Textify can decode your text from BASE64."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Misc - Character Width",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/misc/charwidth"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get the width of a character or a set of characters and their types."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Misc - Wrap Sentences",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/misc/wrapsentences"))), "Showcase")
			],
			Description =
				"Showcases how Textify can wrap a long string to a set of sentence lines."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Is Palindrome?",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/palindrome"))), "Showcase")
			],
			Description =
				"Showcases how Textify can detect whether a word is a palindrome (madam) or not (alarm)."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Verification - Is Numeric?",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/verify/numeric"))), "Showcase")
			],
			Description =
				"Showcases how Textify can detect whether a string is a number (12345) or not (hello)."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace All",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceall"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace all occurrences of characters or strings with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace All Range",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceallrange"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace all occurrences of characters or strings with a char array or a string array."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Character",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replacechar"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace a character found in an index with another character."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Last Occurrence",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replacelastoccurrence"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace last occurrence of character or string with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Replace Occurrence",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/replaceoccurrence"))), "Showcase")
			],
			Description =
				"Showcases how Textify can replace a specific occurrence of character or string with a char or a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Reverse",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/reverse"))), "Showcase")
			],
			Description =
				"Showcases how Textify can reverse the order of characters within a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Shift Letters",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/shiftletters"))), "Showcase")
			],
			Description =
				"Showcases how Textify can shift the letters in a string with a shift threshold."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Split With Double Quotes",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/splitdquotes"))), "Showcase")
			],
			Description =
				"Showcases how Textify can split a string delimited with spaces, while handling double quotes."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Truncate String",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/truncate"))), "Showcase")
			],
			Description =
				"Showcases how Textify can truncate a string."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Manipulation - Escape/Unescape",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/manipulation/escape"))), "Showcase")
			],
			Description =
				"Showcases how Textify can escape and unescape a set of characters in a string."
		},
	];
	FeatureDescriptor[] TextConversionDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Conversion - To Braille",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/conversion/tobraille"))), "Showcase")
			],
			Description =
				"Showcases how Textify can convert your text to the Braille representation."
		},
	];
	FeatureDescriptor[] TextFigletDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Figlet - To Figlet",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/figlet/tofiglet"))), "Showcase")
			],
			Description =
				"Showcases how Textify can render your text as a Figlet typeface."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Figlet - Metrics",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/figlet/metrics"))), "Showcase")
			],
			Description =
				"Showcases how Textify can give you some information about a Figlet font based on your text."
		},
	];
	FeatureDescriptor[] TextNamesDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Names - Find First Names",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/names/findfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can search for first names using the search term, prefix, and suffix."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Names - Find Last Names",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/names/findlast"))), "Showcase")
			],
			Description =
				"Showcases how Textify can search for last names using the search term, prefix, and suffix."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Names - Generate First Names",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/names/genfirst"))), "Showcase")
			],
			Description =
				"Showcases how Textify can generate first names using the number of names, prefix, and suffix."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Names - Generate Last Names",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/names/genlast"))), "Showcase")
			],
			Description =
				"Showcases how Textify can generate last names using the number of names, prefix, and suffix."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Names - Generate Names",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/names/gen"))), "Showcase")
			],
			Description =
				"Showcases how Textify can generate names using the number of names, prefix, and suffix."
		},
	];
	FeatureDescriptor[] TextEmojiDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Emoji - Get Info (manual)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/emoji/infomanual"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get info about a specific emoji by manually entering in an emoji."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Emoji - Get Info (select)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/emoji/infoselect"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get info about a specific emoji by selecting one of the emojis from the list."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Emoji - Get Kaomojis",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/emoji/kaomoji"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get kaomojis."
		},
	];
	FeatureDescriptor[] TextUnicodeDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Unicode - Query String",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/unicode/query"))), "Showcase")
			],
			Description =
				"Showcases how Textify can query all characters in a string and return their common Unicode info."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Unicode - Reverse RTL",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/unicode/reversertl"))), "Showcase")
			],
			Description =
				"Showcases how Textify can reverse characters for RTL."
		},
	];
	FeatureDescriptor[] TextWordDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Words - Get Random Word",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/words/random"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get a random word."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Words - Get Random Word (conditional)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/words/randomcond"))), "Showcase")
			],
			Description =
				"Showcases how Textify can get a random word with conditions."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Words - Find Profanities",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/words/findprof"))), "Showcase")
			],
			Description =
				"Showcases how Textify can find profanities. Caution: not family friendly!"
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Words - Filter Profanities",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/words/bleep"))), "Showcase")
			],
			Description =
				"Showcases how Textify can filter profanities. Caution: not family friendly!"
		},
	];
	FeatureDescriptor[] TextSpacesDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Spaces - Analysis",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/spaces/analysis"))), "Showcase")
			],
			Description =
				"Showcases how Textify can analyze a string for non-normal spaces."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Spaces - Conversion",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/spaces/convert"))), "Showcase")
			],
			Description =
				"Showcases how Textify can sanitize a string from non-normal spaces."
		},
	];
	FeatureDescriptor[] TextJsonDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "JSON - Beautify and Minify",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/json/beauty"))), "Showcase")
			],
			Description =
				"Showcases how Textify can beautify and minify the JSON representation."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "JSON - Difference",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/json/difference"))), "Showcase")
			],
			Description =
				"Showcases how Textify can find differences between two JSON representations."
		},
	];
	FeatureDescriptor[] TextRegexDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Regex - Filter",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/regex/filter"))), "Showcase")
			],
			Description =
				"Showcases how Textify can make string replacements using regexes as the search term."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Regex - Matches",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/regex/matches"))), "Showcase")
			],
			Description =
				"Showcases how Textify can find matches in a string using regexes as the search term."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Regex - Split",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/regex/split"))), "Showcase")
			],
			Description =
				"Showcases how Textify can split matches in a string using regexes as the search term."
		},
	];
	FeatureDescriptor[] TextVersionDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Versioning - Parsing",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/version/parse"))), "Showcase")
			],
			Description =
				"Showcases how Textify can parse versions using SemVer 2.0 compliant rules."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Versioning - Comparison",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("text/version/compare"))), "Showcase")
			],
			Description =
				"Showcases how Textify can compare versions using SemVer 2.0 compliant rules."
		},
	];
	#endregion
	#region Nettify Demos
	FeatureDescriptor[] NetDictionaryDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Dictionary - Define",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/dictionary/define"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can define a word for you."
		},
	];
	FeatureDescriptor[] NetIspDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "ISP - Get Info (select)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/isp/getinfoselect"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can get information about your ISP by selecting a host name."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "ISP - Get Info (manual - e-mail)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/isp/getinfomanualmail"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can get information about your ISP by entering the e-mail address."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "ISP - Get Info (manual - host)",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/isp/getinfomanualhost"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can get information about your ISP by entering the host name."
		},
	];
	FeatureDescriptor[] NetRssDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "RSS - RSS feed reader",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/rss/feed"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can parse the RSS feeds from your favorite news outlet."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "RSS - RSS feed searcher",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/rss/search"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can search for favorite news outlet."
		},
	];
	FeatureDescriptor[] NetWeatherDemonstrations =>
	[
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Weather - Forecast Info",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/weather/forecast"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can get weather forecast using the Weather.com API (you'll need to purchase your API key from IBM)."
		},
		new()
		{
			IconClass = "fa-solid fa-font",
			Title = "Weather - List cities",
			Buttons = [
				(EventCallback.Factory.Create(this, new Action(() => NavManager.NavigateTo("net/weather/list"))), "Showcase")
			],
			Description =
				"Showcases how Nettify can list all cities using the Weather.com API (you'll need to purchase your API key from IBM)."
		},
	];
	#endregion
}
